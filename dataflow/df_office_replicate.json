{
	"name": "df_office_replicate",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "CincinnatiMLSRest",
						"type": "LinkedServiceReference"
					},
					"name": "source1",
					"description": "{@odata.nextLink}"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "CosmosDbNoSql",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "flatten1"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          body as ({@odata.context} as string, {@odata.nextLink} as string, value as ({@odata.context} as string, {@odata.id} as string, IDXOfficeParticipationYN as boolean, MainOfficeKey as integer, MainOfficeKeyNumeric as integer, ModificationTimestamp as string, OfficeAddress1 as string, OfficeBranchType as string, OfficeBrokerKey as integer, OfficeBrokerKeyNumeric as integer, OfficeCity as string, OfficeCorporateLicense as string, OfficeEmail as string, OfficeFax as string, OfficeKey as integer, OfficeKeyNumeric as integer, OfficeManagerKey as integer, OfficeManagerKeyNumeric as integer, OfficeMlsId as string, OfficeName as string, OfficeNationalAssociationId as string, OfficePhone as string, OfficePostalCode as string, OfficeStateOrProvince as string, OfficeStatus as string, OriginalEntryTimestamp as string, OriginatingSystemID as string)[]),",
				"          headers as [string,string]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'rest',",
				"     timeout: 30,",
				"     entity: '/api/v1/OData/cincymls/Office',",
				"     httpMethod: 'GET',",
				"     paginationRules: ['absoluteUrl' -> 'body.{@odata.nextLink}'],",
				"     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine'],",
				"     preferredIntegralType: 'long') ~> source1",
				"source1 foldDown(unroll(body.value, body.value),",
				"     mapColumn(",
				"          {@odata.context} = body.value.{@odata.context},",
				"          {@odata.id} = body.value.{@odata.id},",
				"          IDXOfficeParticipationYN = body.value.IDXOfficeParticipationYN,",
				"          MainOfficeKey = body.value.MainOfficeKey,",
				"          MainOfficeKeyNumeric = body.value.MainOfficeKeyNumeric,",
				"          ModificationTimestamp = body.value.ModificationTimestamp,",
				"          OfficeAddress1 = body.value.OfficeAddress1,",
				"          OfficeBranchType = body.value.OfficeBranchType,",
				"          OfficeBrokerKey = body.value.OfficeBrokerKey,",
				"          OfficeBrokerKeyNumeric = body.value.OfficeBrokerKeyNumeric,",
				"          OfficeCity = body.value.OfficeCity,",
				"          OfficeCorporateLicense = body.value.OfficeCorporateLicense,",
				"          OfficeEmail = body.value.OfficeEmail,",
				"          OfficeFax = body.value.OfficeFax,",
				"          OfficeKey = body.value.OfficeKey,",
				"          OfficeKeyNumeric = body.value.OfficeKeyNumeric,",
				"          OfficeManagerKey = body.value.OfficeManagerKey,",
				"          OfficeManagerKeyNumeric = body.value.OfficeManagerKeyNumeric,",
				"          OfficeMlsId = body.value.OfficeMlsId,",
				"          OfficeName = body.value.OfficeName,",
				"          OfficeNationalAssociationId = body.value.OfficeNationalAssociationId,",
				"          OfficePhone = body.value.OfficePhone,",
				"          OfficePostalCode = body.value.OfficePostalCode,",
				"          OfficeStateOrProvince = body.value.OfficeStateOrProvince,",
				"          OfficeStatus = body.value.OfficeStatus,",
				"          OriginalEntryTimestamp = body.value.OriginalEntryTimestamp,",
				"          OriginatingSystemID = body.value.OriginatingSystemID",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"select1 alterRow(upsertIf(true())) ~> AlterRow1",
				"flatten1 select(mapColumn(",
				"          {odata.id} = {@odata.id},",
				"          id = OfficeKey,",
				"          each(match(!in(['@odata.id','OfficeKey'],name)))",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'document',",
				"     container: 'Office',",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     store: 'cosmosDB',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}